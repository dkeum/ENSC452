#include "audio.hpp"
#include <stdio.h>
#include <sleep.h>
#include "xil_io.h"
#include "xil_mmu.h"
#include "xil_cache.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "intr_functions.hpp"


#define COMM_VAL (*(volatile unsigned long *)(0xFFFF0000))
#define FREQ_OUT_ADDR (int*)(0xFFFF2000)
//Audio Stream Shared Memory
#define AUDIO_STREAM_MODE_ADDR (int *)0x1008000C
#define AUDIO_STREAM_STATE (int *) 0xFFFF0001
#define TONE_SCALE_ADDR (int *)0xFFFF2002
#define RECORD 32
#define PLAYBACK 16
#define SOUND_EFFECT_1 1
#define SOUND_EFFECT_2 2
#define SOUND_EFFECT_3 3
#define SIG_DETECT_3 192
#define SIG_DETECT_2 128
#define SIG_DETECT_1 64
#define REGULAR_MODE 0
#define AUDIO_BUFF_MAX 960000

int main()
{
	Xil_SetTlbAttributes(0xFFFF0000,0x14de2);
	int audio_buff[AUDIO_BUFF_MAX];
	int audio_buff_size = 0;
    while(1){
    	if(*AUDIO_STREAM_MODE_ADDR != 0){
    		switch(*AUDIO_STREAM_STATE){
    		case SOUND_EFFECT_1:
    			xil_printf("Sound_Effect_1\r\n");
    			*AUDIO_STREAM_STATE = REGULAR_MODE;
    			break;
    		case SOUND_EFFECT_2:
    			xil_printf("Sound_Effect_2\r\n");
    			*AUDIO_STREAM_STATE = REGULAR_MODE;
    			break;
    		case SOUND_EFFECT_3:
    			xil_printf("Sound_Effect_3\r\n");
    			*AUDIO_STREAM_STATE = REGULAR_MODE;
    			break;
    		case RECORD:
    			audio_buff_size = record_audio(audio_buff, AUDIO_STREAM_STATE, AUDIO_BUFF_MAX);
    			*AUDIO_STREAM_STATE = REGULAR_MODE;
    			break;
    		case PLAYBACK:
    			playback_audio(audio_buff, AUDIO_STREAM_STATE, audio_buff_size, TONE_SCALE_ADDR);
    			*AUDIO_STREAM_STATE = REGULAR_MODE;
    			break;
    		case SIG_DETECT_1:
    			xil_printf("Detecting Signal 1 \r\n");
    			*AUDIO_STREAM_STATE = REGULAR_MODE;
    			break;
    		case SIG_DETECT_2:
    			xil_printf("Detecting Signal 2 \r\n");
    			*AUDIO_STREAM_STATE = REGULAR_MODE;
    			break;
    		case SIG_DETECT_3:
    			xil_printf("Detecting Signal 3\r\n");
    			*AUDIO_STREAM_STATE = REGULAR_MODE;
    			break;
    		default:
    			audio_stream();
    			break;
    		}
    		audio_stream();
    	}
    }

    return 0;
}


