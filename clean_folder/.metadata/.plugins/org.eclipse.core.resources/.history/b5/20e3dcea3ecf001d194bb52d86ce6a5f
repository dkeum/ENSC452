#include "main.hpp"

#include "xil_mmu.h"
#include "xpseudo_asm.h"
#include "xtime_l.h"

#include "xil_types.h"

#include "shape_params.hpp"



int NUM_BYTES_BUFFER = 5242880;

volatile bool isvertical = true;
volatile bool BTN_FLAG= true;
volatile int background_color=1;
volatile int display_shape=1;

int shape_mode_is_one = 0;

//Prototype function----------------------------------------------------
void generate_shape(); // v1
void generate_shape_from_rng(int bin_num, int counter,int background_color, double rotation,int elongate_on); // v2
void generate_with_shape_parms(int shape_type, int location, int color, int counter,int background_color, double rotation, int elongate_on); //v2
void generate_shape_from_Prng(int bin_num, int counter,int background_color, double rotation,int elongate_mode);
void generate_with_shape_parms_PRNG(int shape_type, int location, int color, int size,int counter,int background_color, double rotation, int elongate_on); //v2


// Global Variables
Square square;
Bins bin1,bin2,bin3,bin4,bin5;
Circle circle;
Triangle triangle;
Pentagon pentagon;
Sound_effects_name sound_effect;
Background background;
int elongate_mode=0;
int isbin1_changed=0;
int isbin2_changed=0;
int isbin3_changed=0;
int isbin4_changed=0;
int isbin5_changed=0;

int bin1_print =0;
int bin2_print =0;
int bin3_print =0;
int bin4_print =0;
int bin5_print =0;

int enter_bin1= 0;
int enter_bin2= 0;
int enter_bin3= 0;
int enter_bin4= 0;
int enter_bin5= 0;

int color_array[] = {(int)0xFF0000FF,(int)0x00F00F00,(int)0x0000FFFF,(int)0xFFFFFFFF,(int)0x00003000,(int)0x0330FFFF,(int)0x0550F55F};

int default_color[]={(int)0xFF0000FF,(int)0x00F00F00,(int)0x0000FFFF,(int)0x00003000,(int)0xFFFFFFFF};
int random_mode_color[5];

int random_size_controler=0;



//Main Program Entry Point
int main(void)
{
	Xil_SetTlbAttributes(0xFFFF0000,0x14de2);
	// Local variables
	int status = 0;
	fft_t*       p_fft_inst;
	cplx_data_t * rx_buff = (cplx_data_t *)malloc(sizeof(cplx_data_t)*FFT_INIT_POINTS);
	cplx_data_t * tx_buff = (cplx_data_t *)malloc(sizeof(cplx_data_t)*FFT_INIT_POINTS);
	XAxiDma myDma;
	XAxiDma_Config * myDmaConfig;

	//Setting initial shared variables settings
	*AMP_VAL_ADDR = 0xE6; //0 Gain
	*BIN_DETECTED_ADDR = 0x00; // 0th Bin
	*TONE_SCALE_ADDR = 0x01; //48kHz
	*AUDIO_STREAM_MODE_ADDR = 0x1; //On
	*SIG_DETECT = 0x00; //0Hz for inital freq detected


    //Configure Audio Codec
	AudioPllConfig();
	LineinLineoutConfig();

    //Configure Switch and Button GPIO
	if(XGpio_Initialize(&btn_swt_gpio, XPAR_GPIO_0_DEVICE_ID) != XST_SUCCESS) return XST_FAILURE;

	XGpio_SetDataDirection(&btn_swt_gpio, SWITCH_CHANNEL, 0xFF);
	XGpio_SetDataDirection(&btn_swt_gpio, BUTTON_CHANNEL, 0xFF);

	//Configure DMA for RNG
    myDmaConfig = XAxiDma_LookupConfigBaseAddr(XPAR_RAND_SYS_AXI_DMA_0_BASEADDR);
    status = XAxiDma_CfgInitialize(&myDma, myDmaConfig);


    // Create FFT object
    p_fft_inst = fft_create(
    	XPAR_SYS_CNTRL_AXI_GPIO_0_DEVICE_ID,
		XPAR_SYS_CNTRL_AXI_DMA_0_DEVICE_ID,
    	XPAR_PS7_SCUGIC_0_DEVICE_ID,
		XPAR_FABRIC_SYS_CNTRL_AXI_DMA_0_S2MM_INTROUT_INTR,
		XPAR_FABRIC_SYS_CNTRL_AXI_DMA_0_MM2S_INTROUT_INTR
    );

    if (p_fft_inst == NULL){
    	xil_printf("ERROR! Failed to create FFT instance.\n\r");
    	return -1;
    }

    //Setting the FFT to FFT_INIT_POINTS points
    fft_set_num_pts(p_fft_inst, FFT_INIT_POINTS);


    if (tx_buff == NULL){
    	xil_printf("ERROR! Failed to allocate memory for the stimulus buffer.\n\r");
    	return -1;
    }

    if (rx_buff == NULL){
    	xil_printf("ERROR! Failed to allocate memory for the result buffer.\n\r");
    	return -1;
    }
    XTime tStart,tEnd;
    XTime_GetTime(&tStart);
    unsigned long long int tempTime;
    int bin = 0;
    int * temp_arr = (int*)malloc(sizeof((int)*5242880));
    // Main event loop
    while (1){
    	XTime_GetTime(&tEnd);
    	tempTime = (2*(tEnd-tStart))%300;
    	for(int i = 0; i < 5; i++){
    		bin += detect_freq(tx_buff, rx_buff, FFT_INIT_POINTS, p_fft_inst);
    	}
        xil_printf("VGA Bin = %d \r\n", bin/5);
        generate_PRNG(&myDma, tempTime, bin/5);
        bin = 0;

        for(int i = 0; i < 5242880; i++)
        	temp_arr[i] = rand()*100;
        memcpy((int *)0x00900000, temp_arr,5242880);

    }








    free(tx_buff);
    free(tx_buff);
    fft_destroy(p_fft_inst);

    return 0;

}
